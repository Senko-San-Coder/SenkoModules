from telethon import events
from .. import loader, utils
import asyncio
import random
from datetime import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import mm
from reportlab.lib.colors import red, black, blue

pdfmetrics.registerFont(TTFont("DejaVu", "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"))

class DoxToolMod(loader.Module):
    strings = {"name": "DoxTool"}
    def __init__(self):
        self.usage_limit = {}

    async def doxcmd(self, message):
        number = utils.get_args_raw(message)
        if not number.startswith("+") or not number[1:].isdigit():
            await message.edit("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä: `.dox +79991234567`")
            return

        uid = str(message.sender_id)
        today = datetime.now().date()
        if uid in self.usage_limit and self.usage_limit[uid][0] == today:
            if self.usage_limit[uid][1] >= 3:
                await message.edit("üîí –õ–∏–º–∏—Ç 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")
                return
            self.usage_limit[uid][1] += 1
        else:
            self.usage_limit[uid] = [today, 1]

        await message.edit(f"üïµÔ∏è –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è `{number}`...\n‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 4-5 –º–∏–Ω—É—Ç...")

        data = await self.query_bots(number, message)
        await message.edit("üìÑ –§–æ—Ä–º–∏—Ä—É—é PDF-–¥–æ—Å—å–µ, –ø–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É...")

        pdf = self.generate_pdf(number, data)
        await message.client.send_file(message.chat_id, pdf, caption="üìÑ –§–µ–π–∫–æ–≤–æ–µ –¥–æ—Å—å–µ –≥–æ—Ç–æ–≤–æ.")
        await message.delete()

    async def query_bots(self, number, message):
        bots = [
            "@InfinitySearcch_bot", "@FastSearch66_bot", "@fasthlr_bot", "@mnp_bot", "@Search",
            "@slb_infa_ibot", "@ReFindOsintRoBot", "@osmosottbot", "@DepSearrchbot", "@friendly_graph_bot",
            "@BTde4_FindHomosapiensbot", "@UnderEyeruBot", "@BD_Cleaning_bot", "@Vektor_infobot",
            "@arhDetectiva_bot", "@blood_night_bot", "@AnonymousSmSTGbot", "@anubis66611bot",
            "@UniversalSearchOfBot", "@CourtProfileBot", "@ipscore_bot", "@PasswordSearchBot",
            "@geometrias_bot", "@egrul_bot", "@getfb_bot", "@FindNameVk_bot", "@faribybot",
            "@qqn28tiyac43wuuyiw0e_bot", "@SherlockSearchOsintbot", "@Numbersearch2025bot",
            "@Infogram_vvbot", "@chaosro_bot", "@Ttmlog_bot", "@breachkaaa_bot",
            "@message_searcher_tg_bot", "@kdskodko23_bot", "@SpyGGbot", "@internetanalystRoBot",
            "@OpenloadCyberBot", "@info_bazanewbot", "@itpsearch_bot", "@osintkit_search_bot",
            "@karma_cybersec_bot", "@datxpertbot", "@Surikosint_bot", "@TlgGeoEarthBot",
            "@CoyoteWatch_bot", "@Ghcrygtffunbot", "@TikTokOSINTbot", "@InfoVkUser_bot",
            "@AVttkBOT", "@avtocodbot", "@TrueCaller_Z_Bot", "@doxinghawk_bot",
            "@himmerasearchbot", "@egrul_bot", "@DiscordSensorbot", "@WhoisDomBot",
            "@DarkOfficalGlaz_Bot", "@onionsosints_bot", "@BomberSms", "@picseek_bot",
            "@metawaverobot", "@DepSearchbot", "@Enigma", "@findokobot"
        ]

        fake_responses = [
            "üìç –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –ú–í–î", "üîê –°–ª–∏—Ç –≤ –¥–∞—Ä–∫–Ω–µ—Ç–µ", "üè† –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω",
            "üë§ VK ID: 98765432", "üìû WhatsApp –∞–∫—Ç–∏–≤–µ–Ω", "üì∏ –§–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–æ", "üéÆ –ò–≥—Ä–∞–µ—Ç –≤ Steam",
            "üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–∫—Å–∏", "üß¨ –ë–∏–æ–º–µ—Ç—Ä–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç", "üíæ –£—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ä—É–º–∞—Ö"
        ]

        responses = []
        used = set()

        for bot in bots:
            await asyncio.sleep(2)  # –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            await message.edit(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ {bot}...")
            await asyncio.sleep(2)  # –∂–¥–µ–º –æ—Ç–≤–µ—Ç (—Ñ–µ–π–∫–æ–≤—ã–π)
            reply = random.choice(fake_responses)
            if reply not in used:
                used.add(reply)
                responses.append((bot, reply))

        return responses

    def generate_pdf(self, number, bot_data):
        path = f"/tmp/dox_{random.randint(1000,9999)}.pdf"
        c = canvas.Canvas(path, pagesize=A4)
        w, h = A4
        y = h - 20 * mm

        c.setFont("DejaVu", 18)
        c.setFillColor(red)
        c.drawCentredString(w / 2, y, "üïµÔ∏è DoxTool ‚Äî –§–µ–π–∫–æ–≤–æ–µ –¥–æ—Å—å–µ")
        y -= 15 * mm

        c.setFont("DejaVu", 12)
        c.setFillColor(black)
        c.drawString(20 * mm, y, f"üìû –ù–æ–º–µ—Ä: {number}")
        y -= 7 * mm
        c.drawString(20 * mm, y, f"üóìÔ∏è –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        y -= 10 * mm

        for idx, (bot, info) in enumerate(bot_data, 1):
            if y < 40 * mm:
                c.showPage()
                c.setFont("DejaVu", 12)
                y = h - 20 * mm
            c.setFillColor(blue)
            c.drawString(20 * mm, y, f"{idx}. –û—Ç–≤–µ—Ç –æ—Ç {bot}:")
            y -= 6 * mm
            c.setFillColor(black)
            c.drawString(25 * mm, y, f"{info}")
            y -= 8 * mm

        c.setFont("DejaVu", 8)
        c.setFillColor(red)
        c.drawCentredString(w / 2, 10 * mm, "‚ö†Ô∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã. –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.")
        c.save()
        return path